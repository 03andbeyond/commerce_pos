<?php

/**
 * @file
 * Hooks and utility functions for commerce_pos.
 */

/**
 * Implements hook_menu().
 */
function commerce_pos_menu() {
  $items = array();

  $items['pos'] = array(
    'title' => 'Point of Sale',
    'page callback' => 'commerce_pos_redirect',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        'process commerce pos returns',
      )
    ),
    'access callback' => '_commerce_pos_access_check',
    'file' => 'includes/commerce_pos.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/sale'] = array(
    'title' => 'Sale',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_sale'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos sales'),
    'file' => 'includes/commerce_pos.sale.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/return'] = array(
    'title' => 'Sale',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_return'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos returns'),
    'file' => 'includes/commerce_pos.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/login'] = array(
    'title' => 'Point of Sale Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_login'),
    'access arguments' => array('access content'),
    'file' => 'includes/commerce_pos.logic.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/product/autocomplete'] = array(
    'title' => 'Product Autocomplete',
    'page callback' => 'commerce_pos_product_autocomplete',
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        // @TODO: probably need this for returns too?
        /*'process commerce pos returns',*/
      )
    ),
    'file' => 'includes/commerce_pos.common.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/user/autocomplete'] = array(
    'title' => 'User Autocomplete',
    'page callback' => 'commerce_pos_user_autocomplete',
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        // @TODO: probably need this for returns too?
        /*'process commerce pos returns',*/
      ),
    ),
    'file' => 'includes/commerce_pos.common.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/store/pos'] = array(
    'title' => 'Point of Sale Settings',
    'page callback' => 'commerce_pos_settings',
    'access arguments' => array('administer commerce pos'),
    'file '=> 'includes/commerce_pos.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_pos_permission() {
  return array(
    'administer commerce pos' =>  array(
      'title' => t('Administer Commerce POS'),
    ),
    'process commerce pos sales' => array(
      'title' => t('Process Commerce POS sales'),
    ),
    'process commerce pos returns' => array(
      'title' => t('Process Commerce POS returns'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function commerce_pos_theme($existing, $type, $theme, $path) {
  return array(
  );
}

/**
 * Implements hook_commerce_pos_transaction_base_info().
 */
function commerce_pos_commerce_pos_transaction_base_info() {
  return array(
    'commerce_pos_transaction_base_actions' => array(
      'class' => 'CommercePosTransactionBaseActions',
      'types' => array(
        CommercePosService::TRANSACTION_TYPE_SALE,
        CommercePosService::TRANSACTION_TYPE_RETURN,
      ),
    ),
  );
}

/**
 * Implements hook_commerce_order_state_info().
 *
 * Defines a new state that orders created by the POS live in until they have
 * been fully processed.
 */
function commerce_pos_commerce_order_state_info() {
  $order_states = array();

  $order_states['commerce_pos'] = array(
    'name' => 'commerce_pos',
    'title' => t('Point of Sale'),
    'description' => t('Orders in this state are currently being generated by the POS.'),
    'weight' => 10,
    'default_status' => 'creating',
  );

  return $order_states;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_pos_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['commerce_pos_in_progress'] = array(
    'name' => 'commerce_pos_in_progress',
    'title' => t('POS - In Progress'),
    'state' => 'commerce_pos',
  );

  $order_statuses['commerce_pos_parked'] = array(
    'name' => 'commerce_pos_parked',
    'title' => t('POS - Parked'),
    'state' => 'commerce_pos',
  );

  $order_statuses['commerce_pos_voided'] = array(
    'name' => 'commerce_pos_voided',
    'title' => t('POS - Voided'),
    'state' => 'commerce_pos',
  );

  return $order_statuses;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Adds our own custom view modes for commerce entities.
 */
function commerce_pos_entity_info_alter(&$entity_info) {
  $entity_info['commerce_order']['view modes']['commerce_pos'] = array(
    'label' => t('POS'),
    'custom settings' => TRUE,
  );

  $entity_info['commerce_line_item']['view modes']['commerce_pos'] = array(
    'label' => t('POS'),
    'custom settings' => TRUE,
  );
}

/**
 * Access callback for POS pages.
 *
 * @param string|array $access_arguments
 *   A list of permissions to check against.
 *
 * @return bool
 */
function _commerce_pos_access_check($access_arguments) {
  $access = FALSE;

  if (is_string($access_arguments)) {
    $access_arguments = array($access_arguments);
  }

  if (user_is_logged_in()) {
    if (user_access('administer commerce pos')) {
      $access = TRUE;
    }
    else {

      // They're logged in, make sure they have permission to access the page.
      $passed_all_checks = TRUE;

      foreach ($access_arguments as $access_argument) {
        if (!user_access($access_argument)) {
          $passed_all_checks = FALSE;
          break;
        }
      }

      if ($passed_all_checks) {
        $access = TRUE;
      }
    }
  }

  if (!$access) {
    // If they're not even logged in, we should take them to our custom
    // login page.
    drupal_goto('pos/login');
  }

  return $access;
}
