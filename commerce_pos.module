<?php

/**
 * @file
 * Hooks and utility functions for commerce_pos.
 */

/**
 * Implements hook_menu().
 */
function commerce_pos_menu() {
  $items = array();

  $items['pos'] = array(
    'title' => 'Point of Sale',
    'page callback' => 'commerce_pos_redirect',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        'process commerce pos returns',
      )
    ),
    'access callback' => '_commerce_pos_access_check',
    'file' => 'includes/commerce_pos.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/sale'] = array(
    'title' => 'Sale',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_sale'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos sales'),
    'file' => 'includes/commerce_pos.sale.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/sale/pay'] = array(
    'title' => 'Pay',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_pay'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos sales'),
    'file' => 'includes/commerce_pos.pay.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/return'] = array(
    'title' => 'Sale',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_return'),
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array('process commerce pos returns'),
    'file' => 'includes/commerce_pos.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/login'] = array(
    'title' => 'Point of Sale Login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_login'),
    'access arguments' => array('access content'),
    'file' => 'includes/commerce_pos.login.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/product/autocomplete'] = array(
    'title' => 'Product Autocomplete',
    'page callback' => 'commerce_pos_product_autocomplete',
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        // @TODO: probably need this for returns too?
        /*'process commerce pos returns',*/
      )
    ),
    'file' => 'includes/commerce_pos.common.inc',
    'type' => MENU_CALLBACK,
  );

  $items['pos/user/autocomplete'] = array(
    'title' => 'User Autocomplete',
    'page callback' => 'commerce_pos_user_autocomplete',
    'access callback' => '_commerce_pos_access_check',
    'access arguments' => array(
      array(
        'process commerce pos sales',
        // @TODO: probably need this for returns too?
        /*'process commerce pos returns',*/
      ),
    ),
    'file' => 'includes/commerce_pos.common.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/config/pos'] = array(
    'title' => 'Point of Sale',
    'description' => 'Administer POS.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  $items['admin/commerce/config/pos/settings'] = array(
    'title' => 'Point of Sale Settings',
    'page callback' => 'commerce_pos_settings',
    'access arguments' => array('administer commerce pos'),
    'file '=> 'includes/commerce_pos.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_pos_permission() {
  return array(
    'administer commerce pos' =>  array(
      'title' => t('Administer Commerce POS'),
    ),
    'process commerce pos sales' => array(
      'title' => t('Process Commerce POS sales'),
    ),
    'process commerce pos returns' => array(
      'title' => t('Process Commerce POS returns'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function commerce_pos_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_pos_sale' => array(
      'render element' => 'form',
      'template' => 'commerce-pos-sale',
      'path' => $path . '/theme',
    ),
    'commerce_pos_pay' => array(
      'render element' => 'form',
      'template' => 'commerce-pos-pay',
      'path' => $path . '/theme',
    ),
    'commerce_pos_keypad' => array(
      'render element' => 'element',
      'template' => 'commerce-pos-keypad',
      'path' => $path . '/theme',
    ),
    'commerce_pos_transaction_balance' => array(
      'template' => 'commerce-pos-transaction-balance',
      'path' => $path . '/theme',
      'variables' => array(
        'rows' => array(),
        'form' => NULL,
        'totals' => array(),
        'view' => NULL
      ),
    ),
    'commerce_pos_header' => array(
      'template' => 'commerce-pos-header',
      'path' => $path . '/theme',
      'variables' => array(
        'account' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_pos_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_pos') . '/includes/views',
  );
}

/**
 * Implements hook_commerce_pos_transaction_base_info().
 */
function commerce_pos_commerce_pos_transaction_base_info() {
  return array(
    'commerce_pos_transaction_base_actions' => array(
      'class' => 'CommercePosTransactionBaseActions',
      'types' => array(
        CommercePosService::TRANSACTION_TYPE_SALE,
        CommercePosService::TRANSACTION_TYPE_RETURN,
      ),
    ),
  );
}

/**
 * Implements hook_commerce_order_state_info().
 *
 * Defines a new state that orders created by the POS live in until they have
 * been fully processed.
 */
function commerce_pos_commerce_order_state_info() {
  $order_states = array();

  $order_states['commerce_pos'] = array(
    'name' => 'commerce_pos',
    'title' => t('Point of Sale'),
    'description' => t('Orders in this state are currently being generated by the POS.'),
    'weight' => 10,
    'default_status' => 'creating',
  );

  return $order_states;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_pos_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['commerce_pos_in_progress'] = array(
    'name' => 'commerce_pos_in_progress',
    'title' => t('POS - In Progress'),
    'state' => 'commerce_pos',
  );

  $order_statuses['commerce_pos_parked'] = array(
    'name' => 'commerce_pos_parked',
    'title' => t('POS - Parked'),
    'state' => 'commerce_pos',
  );

  $order_statuses['commerce_pos_voided'] = array(
    'name' => 'commerce_pos_voided',
    'title' => t('POS - Voided'),
    'state' => 'commerce_pos',
  );

  return $order_statuses;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Adds our own custom view modes for commerce entities.
 */
function commerce_pos_entity_info_alter(&$entity_info) {
  $entity_info['commerce_order']['view modes']['commerce_pos'] = array(
    'label' => t('POS'),
    'custom settings' => TRUE,
  );

  $entity_info['commerce_line_item']['view modes']['commerce_pos'] = array(
    'label' => t('POS'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_commerce_pos_balance_summary_row_info().
 *
 * Taken from commerce_payment_commerce_payment_totals_row_info().
 */
function commerce_payment_commerce_pos_balance_summary_row_info($totals, $order) {
  $rows = array();

  if (count($totals) == 0) {
    // Add a row for the remaining balance on the order.
    if ($order) {
      $balance = commerce_payment_order_balance($order, $totals);

      $rows[] = array(
        'data' => array(
          array('data' => t('To pay'), 'class' => array('label')),
          array('data' => commerce_currency_format($balance['amount'] > 0 ? $balance['amount'] : 0, $balance['currency_code']), 'class' => array('balance')),
        ),
        'class' => array('order-to-pay'),
        'weight' => 10,
      );

      if ($balance['amount'] < 0) {
        $rows[] = array(
          'data' => array(
            array('data' => t('Change'), 'class' => array('label')),
            array('data' => commerce_currency_format($balance['amount'] * -1, $balance['currency_code']), 'class' => array('balance')),
          ),
          'class' => array('order-change'),
          'weight' => 15,
        );
      }
    }
  }
  elseif (count($totals) == 1) {
    // Otherwise if there's only a single currency total...
    $currency_code = key($totals);

    // Add a row for the total amount paid.
    $rows[] = array(
      'data' => array(
        array('data' => t('Total paid'), 'class' => array('label')),
        array('data' => commerce_currency_format($totals[$currency_code], $currency_code), 'class' => array('total')),
      ),
      'class' => array('total-paid'),
      'weight' => 0,
    );

    // Add a row for the remaining balance on the order.
    if ($order) {
      // @todo Fix for when there's a FALSE $balance.
      $balance = commerce_payment_order_balance($order, $totals);

      $rows[] = array(
        'data' => array(
          array('data' => t('To pay'), 'class' => array('label')),
          array('data' => commerce_currency_format($balance['amount'] > 0 ? $balance['amount'] : 0, $balance['currency_code']), 'class' => array('balance')),
        ),
        'class' => array('order-to-pay'),
        'weight' => 10,
      );

      if ($balance['amount'] < 0) {
        $rows[] = array(
          'data' => array(
            array('data' => t('Change'), 'class' => array('label')),
            array('data' => commerce_currency_format($balance['amount'] * -1, $balance['currency_code']), 'class' => array('balance')),
          ),
          'class' => array('order-change'),
          'weight' => 15,
        );
      }
    }
  }
  else {
    $weight = 0;

    foreach ($totals as $currency_code => $amount) {
      $rows[] = array(
        'data' => array(
          array('data' => t('To pay (@currency_code)', array('@currency_code' => $currency_code)), 'class' => array('label')),
          array('data' => commerce_currency_format($amount > 0 ? $amount : 0, $currency_code), 'class' => array('balance')),
        ),
        'class' => array('order-to-pay', 'order-to-pay-' . $currency_code),
        'weight' => $weight++,
      );

      if ($amount < 0) {
        $rows[] = array(
          'data' => array(
            array('data' => t('Change (@currency_code)', array('@currency_code' => $currency_code)), 'class' => array('label')),
            array('data' => commerce_currency_format($amount * -1, $currency_code), 'class' => array('balance')),
          ),
          'class' => array('order-change', 'order-change-' . $currency_code),
          'weight' => $weight++,
        );
      }
    }
  }

  return $rows;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pos_form_commerce_cop_edit_payment_form_alter(&$form, &$form_state) {
  $pos_default = 0;

  if (!empty($form['id']['#default_value'])) {
    $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());
    $payment_id = $form['id']['#default_value'];

    if (in_array($payment_id, $enabled_payment_methods)) {
      $pos_default = 1;
    }
  }

  $form['pos'] = array(
    '#type' => 'checkbox',
    '#title' => t('Available on POS'),
    '#description' => t('TRUE or FALSE indicating whether or not this payment method can be used in the POS interface.'),
    '#default_value' => $pos_default,
  );

  $form['actions']['#weight'] = 50;

  $form['#submit'][] = 'commerce_pos_cop_edit_form_submit';
}

/**
 * Additional submit handler for the Commerce COP payment method form.
 *
 * This looks to see whether the "Available POS" checkbox was checked or not
 * and add/removes the payment method from the list of enabled methods for the
 * POS.
 */
function commerce_pos_cop_edit_form_submit($form, &$form_state) {
  if (isset($form_state['values']['pos'])) {
    $payment_method_id = $form_state['values']['id'];

    if (!empty($form_state['values']['pos'])) {
      commerce_pos_enable_payment_method($payment_method_id);
    }
    else {
      commerce_pos_disable_payment_method($payment_method_id);
    }
  }
}

/**
 * Retrieves a list of Commerce Custom Offline Payment methods that are enabled
 * on the POS.
 */
function commerce_pos_get_payment_methods() {
  // First get a list of all offline payment methods.
  $cop_payment_methods = commerce_cop_get_payments();
  $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());
  $enabled_pos_methods = array();

  foreach ($cop_payment_methods as $method_id => $payment_method) {
    if (!empty($payment_method['status']) && in_array($method_id, $enabled_payment_methods)) {
      $enabled_pos_methods[$method_id] = $payment_method;
    }
  }

  return $enabled_pos_methods;
}

/**
 * Enables a Commerce Custom Offline Payment method for use in the POS.
 */
function commerce_pos_enable_payment_method($method_id) {
  $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());

  if (!in_array($method_id, $enabled_payment_methods)) {
    $enabled_payment_methods[] = $method_id;
    variable_set('commerce_pos_payment_methods', $enabled_payment_methods);
    return TRUE;
  }

  return FALSE;
}

/**
 * Disables a Commerce Custom Offline Payment method from use in the POS.
 */
function commerce_pos_disable_payment_method($method_id) {
  $enabled_payment_methods = variable_get('commerce_pos_payment_methods', array());

  foreach ($enabled_payment_methods as $key => $enabled_method_id) {
    if ($method_id == $enabled_method_id) {
      array_splice($enabled_payment_methods, $key, 1);
      variable_set('commerce_pos_payment_methods', $enabled_payment_methods);
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback for POS pages.
 *
 * @param string|array $access_arguments
 *   A list of permissions to check against.
 *
 * @return bool
 */
function _commerce_pos_access_check($access_arguments) {
  $access = FALSE;

  if (is_string($access_arguments)) {
    $access_arguments = array($access_arguments);
  }

  if (user_is_logged_in()) {
    if (user_access('administer commerce pos')) {
      $access = TRUE;
    }
    else {

      // They're logged in, make sure they have permission to access the page.
      $passed_all_checks = TRUE;

      foreach ($access_arguments as $access_argument) {
        if (!user_access($access_argument)) {
          $passed_all_checks = FALSE;
          break;
        }
      }

      if ($passed_all_checks) {
        $access = TRUE;
      }
    }
  }

  if (!$access) {
    // If they're not even logged in, we should take them to our custom
    // login page.
    drupal_goto('pos/login');
  }

  return $access;
}

/**
 * Returns a sorted array of POS balance table rows.
 *
 * @param $totals
 *   An array of payment totals whose keys are currency codes and values are the
 *     total amount paid in each currency.
 * @param $order
 *   If available, the order object to which the payments apply.
 *
 * @return
 *   An array of table row data as expected by theme_table().
 *
 * @see hook_commerce_payment_totals_row_info()
 */
function commerce_pos_balance_summary_rows($totals, $order) {
  // Retrieve rows defined by the hook and allow other modules to alter them.
  $rows = module_invoke_all('commerce_pos_balance_summary_row_info', $totals, $order);
  drupal_alter('commerce_pos_balance_summary_row_info', $rows, $totals, $order);

  // Sort the rows by weight and return the array.
  uasort($rows, 'drupal_sort_weight');

  return $rows;
}

/**
 * Returns a summary view of a POS transaction's order.
 */
function commerce_pos_balance_summary($order) {
  // @TODO: this view should be included as a default view in the module,
  // export it via features.
  return views_embed_view('pos_balance_summary', 'block_1', $order->order_id);
}

/**
 * Searches for products using the provided keyword(s).
 */
function commerce_pos_product_lookup($keywords) {
  $result = NULL;

  // Allow other modules to perform lookups before we fall back to the default.
  drupal_alter('commerce_pos_product_lookup', $result, $keywords);

  if ($result === NULL) {
    // No modules had results, search normally.
    $query = 'SELECT product_id FROM {commerce_product}
    WHERE sku = :term
    OR title LIKE :term_like
    ORDER BY title ASC
    LIMIT 5';

    $db_result = db_query($query, array(
      ':term' => $keywords,
      ':term_like' => db_like($keywords) . '%',
    ));

    foreach ($db_result as $row) {
      $result[] = $row->product_id;
    }
  }

  return $result;
}

/**
 * Builds an array of product data for the product autocomplete.
 */
function _commerce_pos_product_autocomplete_build($product_id) {
  $data = FALSE;

  if ($product = commerce_product_load($product_id)) {
    $stock = NULL;
    $image = NULL;

    // Note: an entity_metadata_wrapper is not used here for the sake of speed.
    if ($stock = field_get_items('commerce_product', $product, 'commerce_stock')) {
      $stock = !empty($stock[0]['value']) ? $stock[0]['value'] : 0;
    }

    if ($variation_images = field_get_items('commerce_product', $product, 'field_variation_images')) {
      $image = !empty($variation_images[0]['uri']) ? file_create_url($variation_images[0]['uri']) : NULL;
    }

    $price = commerce_product_calculate_sell_price($product);
    $price = commerce_currency_format($price['amount'], $price['currency_code']);

    $data = array(
      'title' => $product->title,
      'sku' => $product->sku,
      'price' => $price,
      'stock' => (int) $stock,
      'image' => $image,
    );
  }

  return $data;
}
