<?php

/**
 * @file
 * commerce_pos_location.install
 */

/**
 * Implements hook_schema().
 */
function commerce_pos_location_schema() {
  $schema['commerce_pos_location'] = array(
    'description' => 'The base table for the POS Location entity',
    'fields' => array(
      'location_id' => array(
        'description' => 'Primary key of the location entity',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Location name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the location was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the location was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('location_id'),
    'indexes' => array(
      'location_name' => array('name'),
      'location_created' => array('created'),
      'location_changed' => array('changed'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function commerce_pos_location_install() {
  // Ensure that location_id is updated to register_id for POS transactions.
  // @see commerce_pos_update_7204()
  commerce_pos_location_update_pos_location_id_to_register_id();

  // location_id to register_id updates for report submodule.
  if (module_exists('commerce_pos_report')) {
    commerce_pos_location_update_report_location_id_to_register_id();
  }
}

/**
 * Implements hook_enable().
 */
function commerce_pos_location_enable() {
  commerce_pos_location_configure_locations();
}

/**
 * Create commerce_pos_location_float table.
 */
function commerce_pos_location_update_7001() {
  db_create_table('commerce_pos_location_float', array(
    'description' => 'The base table for POS location float amounts.',
    'fields' => array(
      'float_id' => array(
        'description' => 'The unique identifier for this float entry.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'location_id' => array(
        'description' => 'The location this float entry is for',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'description' => 'The float amount, in cents',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the location was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('float_id'),
    'indexes' => array(
      'float_location' => array('location_id'),
      'float_amount' => array('amount'),
      'float_created' => array('created'),
    ),
  ));
}

/**
 * Enable commerce_pos_register and migrate data.
 */
function commerce_pos_location_update_7202(&$sandbox) {
  // Store mapping of location_id => register_id for doing database updates.
  $sandbox['location_register_map'] = array();

  $enabled = module_enable(array('commerce_pos_register'));
  if (!$enabled || !module_exists('commerce_pos_register')) {
    throw new DrupalUpdateException('Failed to enable commerce_pos_register');
  }

  // Enable register submodule.
  commerce_pos_location_update_7202_create_registers($sandbox);

  // Migrate float data to commerce_pos_register_float table.
  if (db_table_exists('commerce_pos_location_float')) {
    commerce_pos_location_update_7202_update_floats($sandbox);
  }

  // Database updates for core module.
  commerce_pos_location_update_pos_location_id_to_register_id($sandbox);

  // Database updates for report submodule.
  if (module_exists('commerce_pos_report')) {
    commerce_pos_location_update_report_location_id_to_register_id($sandbox);
  }
}

/**
 * Registers didn't exist prior to this update, so we create a default one for every location.
 */
function commerce_pos_location_update_7202_create_registers(&$sandbox) {
  // Create register for every location (attach registers to locations).
  $results = db_select('commerce_pos_location', 'cpl')
    ->fields('cpl', array('location_id'))
    ->execute();

  foreach ($results as $result) {
    $location = commerce_pos_location_load($result->location_id);
    /* @var $register Entity */
    $register = entity_create('commerce_pos_register', array(
      'name' => $location->name,
    ));

    if ($register) {
      $register->field_location_reference[LANGUAGE_NONE][0]['target_id'] = $location->location_id;
      $register->save();
      $sandbox['location_register_map'][$result->location_id] = $register->identifier();
    }
    else {
      // Abort update so we can debug.
      throw new DrupalUpdateException('Failed to create new register for location ' . $result->location_id);
    }
  }
}

/**
 * Migrate float data from location module to register module.
 */
function commerce_pos_location_update_7202_update_floats(&$sandbox) {
  $query = db_select('commerce_pos_location_float', 'cplf')
    ->fields('cplf');

  foreach ($query->execute() as $row) {
    $register_id = isset($sandbox['location_register_map'][$row->location_id]) ? $sandbox['location_register_map'][$row->location_id] : 0;
    $record = array(
      'register_id' => $register_id,
      'amount' => $row->amount,
      'created' => $row->created,
    );

    drupal_write_record('commerce_pos_register_float', $record);
  }

  db_drop_table('commerce_pos_location_float');
}

/**
 * Alter the core commerce_pos module to reference registers on transactions.
 */
function commerce_pos_location_update_pos_location_id_to_register_id(&$sandbox = array()) {
  $spec = array(
    'description' => 'The physical register that this transaction was performed at.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );

  if (!db_field_exists('commerce_pos_transaction', 'register_id')) {
    db_add_field('commerce_pos_transaction', 'register_id', $spec);
  }

  if (!db_index_exists('commerce_pos_transaction', 'register_id')) {
    db_add_index('commerce_pos_transaction', 'register_id', array(array('register_id', 4)));
  }

  if (db_field_exists('commerce_pos_transaction', 'location_id')) {
    // The mapping of locations to registers may or may not be set depending on
    // whether we've come from install or update.
    if (isset($sandbox['location_register_map'])) {
      foreach ($sandbox['location_register_map'] as $location_id => $register_id) {
        db_update('commerce_pos_transaction')
          ->condition('location_id', $location_id, '=')
          ->fields(array('register_id' => $register_id))
          ->execute();
      }
    }

    db_drop_field('commerce_pos_transaction', 'location_id');
  }
}

/**
 * Alter commerce_pos_report to use register entities instead of locations.
 */
function commerce_pos_location_update_report_location_id_to_register_id(&$sandbox = array()) {
  $spec = array(
    'description' => 'The register this entry is for.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );

  // Create new field with index.
  if (!db_field_exists('commerce_pos_report_declared_data', 'register_id')) {
    db_add_field('commerce_pos_report_declared_data', 'register_id', $spec);
  }

  if (!db_index_exists('commerce_pos_report_declared_data', 'data_register')) {
    db_add_index('commerce_pos_report_declared_data', 'data_register', array('register_id'));
  }

  // Migrate location ids to the appropriate new register id.
  if (db_field_exists('commerce_pos_report_declared_data', 'location_id')) {
    // The mapping of locations to registers may or may not be set depending on
    // whether we've come from install or update.
    if (isset($sandbox['location_register_map'])) {
      foreach ($sandbox['location_register_map'] as $location_id => $register_id) {
        db_update('commerce_pos_report_declared_data')
          ->condition('location_id', $location_id, '=')
          ->fields(array('register_id' => $register_id))
          ->execute();
      }
    }

    // Ensure old field and index is removed.
    if (db_index_exists('commerce_pos_report_declared_data', 'data_location')) {
      db_drop_index('commerce_pos_report_declared_data', 'data_location');
    }

    db_drop_field('commerce_pos_report_declared_data', 'location_id');
  }
}
