<?php

/**
 * @file
 * Core hooks and utility functions for commerce_pos_discount.
 */

/**
 * Implements hook_commerce_pos_transaction_base_info().
 */
function commerce_pos_discount_commerce_pos_transaction_base_info() {
  return array(
    'commerce_pos_discount_base' => array(
      'class' => 'CommercePosDiscountBase',
      'types' => array(
        CommercePosService::TRANSACTION_TYPE_SALE,
        CommercePosService::TRANSACTION_TYPE_RETURN,
      ),
    ),
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_pos_discount_commerce_line_item_type_info() {
  return array(
    'commerce_pos_discount' => array(
      'type' => 'commerce_pos_discount',
      'name' => t('POS discount'),
      'description' => t('Line item for fixed POS discount amounts.'),
      'add_form_submit_value' => t('Add POS discount'),
      'base' => 'commerce_pos_discount_line_item',
    ),
  );
}

/**
 * Determine the discount's line item title.
 *
 * @return string
 *   The line item title.
 */
function commerce_pos_discount_line_item_title() {
  return t('POS discount');
}

/**
 * Implements hook_commerce_line_item_rebase_unit_price().
 */
function commerce_pos_discount_commerce_line_item_rebase_unit_price(&$price, $old_components, $line_item) {
  // Check if any discounts have been applied to a line item and recalculate them
  // as needed.
  foreach ($old_components as $component) {
    if (isset($component['price']['data']['pos_discount_type'])) {
      $discount_type = $component['price']['data']['pos_discount_type'];
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      switch ($discount_type) {
        case 'percent':
          $discount_amount = $component['price']['data']['pos_discount_rate'];
          break;

        case 'fixed':
          $discount_amount = $component['price']['amount'] * -1;
          break;
      }

      CommercePosDiscountService::applyDiscount($line_item_wrapper, $discount_type, $discount_amount);

      if ($component = CommercePosDiscountService::getPosDiscountComponent($line_item_wrapper->commerce_unit_price, $component['price']['data']['discount_name'])) {
        $component_name = 'discount|' . CommercePosDiscountService::LINE_ITEM_DISCOUNT_NAME;
        $price['data'] = commerce_price_component_add($price, $component_name, $component['price'], TRUE);
        $price['amount'] += $component['price']['amount'];
      }
    }
  }
}

/**
 * Implements hook_commerce_price_formatted_components_alter().
 */
function commerce_pos_discount_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  if (isset($price['data']['components'])) {
    // Loop into price components and alter the component title if the discount
    // component label is found.
    foreach ($price['data']['components'] as $component) {
      if (!isset($component['price']['data']['pos_discount_component_title'])) {
        continue;
      }

      $components[$component['name']]['title'] = $component['price']['data']['pos_discount_component_title'];

      if(strpos($component['name'], 'pos_order_discount') !== FALSE) {
        // add action button for removing order discount
        $components[$component['name']]['action'] = '<a href="#" class="commerce-pos-remove-order-discount button-link small">' . t('remove') . '</a>';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_pos_discount_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('commerce_pos_sale', 'commerce_pos_return'))) {
    _commerce_pos_discount_transaction_form_alter($form, $form_state);
  }
  elseif (in_array($form_id, array('commerce_pos_sale_payment'))) {
    _commerce_pos_discount_payment_form_alter($form, $form_state);
  }
}

function _commerce_pos_discount_payment_form_alter(&$form, $form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_discount') . '/js/commerce_pos_discount.js';

  $form_ajax = array(
    'wrapper' => 'commerce-pos-pay-form-wrapper',
    'callback' => 'commerce_pos_payment_wrapper_js',
  );

  if(isset($form['balance']) && isset($form['balance']['actions'])) {
    $form['balance']['actions']['remove_order_discount'] = array(
      '#type' => 'submit',
      '#value' => t('Remove Order Discount'),
      '#attributes' => array(
        'class' => array(
          'commerce-pos-payment-btn',
          'commerce-pos-remove-order-discount'
        ),
        'style' => array('display: none')
      ),
      '#submit' => array('commerce_pos_transaction_remove_order_discount_submit'),
      '#ajax' => array_merge($form_ajax, array('event' => 'remove_order_discount')),
      '#limit_validation_errors' => array(),
      '#element_key' => 'remove-order-discount',
    );
  }
}

/**
 * Adds discount functionality to the POS transaction forms.
 */
function _commerce_pos_discount_transaction_form_alter(&$form, &$form_state) {
  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_discount') . '/js/commerce_pos_discount.js';

  if (isset($form['line_items'])) {
    $wrapper_ajax = array(
      'wrapper' => $form_state['wrapper_id'],
      'callback' => 'commerce_pos_discount_wrapper_js',
    );

    foreach (element_children($form['line_items']) as $line_item_id) {
      $line_item_element = &$form['line_items'][$line_item_id];

      $line_item_element['discounts'] = array(
        '#type' => 'container',
        '#id' => 'commerce-pos-discount-wrapper-' . $line_item_id,
        '#attributes' => array(
          'class' => array(
            'commerce-pos-discount-wrapper',
          )
        )
      );

      $line_item_element['discounts']['toggle_discount'] = array(
        '#type' => 'button',
        '#value' => t('Discount'),
        '#line_item_id' => $line_item_id,
        '#element_key' => 'toggle-discount',
        '#name' => 'commerce-pos-discount-toggle-discount-' . $line_item_id,
        '#ajax' => array(
          'wrapper' => 'commerce-pos-discount-wrapper-' . $line_item_id,
          'callback' => 'commerce_pos_discount_add_discount_js',
        ),
      );

      $discount_data = $form_state['transaction']->doAction('getExistingLineItemDiscountAmount', $line_item_id);
      if (!empty($form_state['triggering_element']['#element_key']) && $form_state['triggering_element']['#element_key'] == 'toggle-discount') {
        $line_item_element['discounts']['toggle_discount']['#element_key'] = 'toggle-discount-hide';

        $line_item_element['discounts']['add_discount'] = array(
          '#type' => 'container',
          '#size' => 2,
        );

        $line_item_element['discounts']['add_discount']['#attached']['js'][] = array(
          'type' => 'setting',
          'data' => array(
            'commercePosDiscount' => array(
              'focusInput' => TRUE,
              'lineItemId' => $line_item_id,
            ),
          ),
        );

        $line_item_element['discounts']['add_discount']['description'] = array(
          //'#markup' => t('Discount:'),
        );

        $discount_default_value = NULL;
        if($discount_data && !empty($discount_data['amount'])){ // make sure 0 gets set as NULL
          $discount_default_value = $discount_data['amount'];
        }

        $line_item_element['discounts']['add_discount']['amount'] = array(
          '#type' => 'textfield',
          '#title' => NULL,
          '#size' => 2,
          '#default_value' => $discount_default_value,
        );

        $line_item_element['discounts']['add_discount']['percent'] = array(
          '#type' => 'button',
          '#value' => '%',
          '#element_key' => 'add-percent-discount',
          '#line_item_id' => $line_item_id,
          '#name' => 'commerce-pos-discount-percent-discount-' . $line_item_id,
          '#ajax' => $wrapper_ajax,
          '#attributes' => array(
            'class' => array('blue')
          )
        );

        $line_item_element['discounts']['add_discount']['fixed'] = array(
          '#type' => 'button',
          '#value' => '$',
          '#element_key' => 'add-fixed-discount',
          '#line_item_id' => $line_item_id,
          '#name' => 'commerce-pos-discount-fixed-discount-' . $line_item_id,
          '#ajax' => $wrapper_ajax,
          '#attributes' => array(
            'class' => array('blue')
          )
        );

        if ($discount_data) {
          $line_item_element['discounts']['add_discount'][$discount_data['type']]['#attributes']['class'][] = 'active';
        }
      }
      else {
        if (!empty($discount_data) && isset($discount_data['amount']) & !empty($discount_data['amount'])) {
          $discount_type_symbol = '';
          if (isset($discount_data['type']) && $discount_data['type'] == 'percent') {
            $discount_type_symbol = '%';
          } else {
            $discount_type_symbol = ' ' . $discount_data['currency_code'];
          }

          $line_item_element['discounts']['discount_description'] = array(
            '#markup' => $discount_data['amount'] . $discount_type_symbol,
            '#prefix' => '<span class="discount-description">',
            '#suffix' => '</span>',
            '#line_item_id' => $line_item_id,
            '#element_key' => 'discount-description',
          );

          $line_item_element['discounts']['remove_discount'] = array(
            '#type' => 'button',
            '#value' => 'remove',
            '#prefix' => ' - ',
            '#element_key' => 'remove-discount',
            '#line_item_id' => $line_item_id,
            '#name' => 'commerce-pos-discount-remove-discount-' . $line_item_id,
            '#ajax' => $wrapper_ajax,
            '#attributes' => array(
              'class' => array('button-link', 'small')
            )
          );
        }
        else {
          $line_item_element['discounts']['#attributes']['class'][] = 'no-background';
        }
      }
    }

    // Add a section for order discounts.
    if (!empty($form['transaction_options']['actions'])) {
      // add remove order discount hidden button
      $form['transaction_options']['actions']['remove_order_discount'] = array(
        '#type' => 'submit',
        '#value' => t('Remove Order Discount'),
        '#attributes' => array(
          'class' => array(
            'commerce-pos-transaction-btn',
            'commerce-pos-remove-order-discount'
          ),
          'style' => array('display: none')
        ),
        '#submit' => array('commerce_pos_transaction_remove_order_discount_submit'),
        '#ajax' => array_merge($wrapper_ajax, array('event' => 'remove_order_discount')),
        '#limit_validation_errors' => array(),
        '#element_key' => 'remove-order-discount',
      );

      $form['transaction_options']['actions']['discount'] = array(
        '#type' => 'button',
        '#value' => t('Discount'),
        '#element_key' => 'toggle-order-discount',
        '#attributes' => array(
          'class' => array('commerce-pos-transaction-btn'),
        ),
        '#ajax' => array(
          'callback' => 'commerce_pos_discount_order_discount_js',
          'wrapper' => 'commerce-pos-discount-add-order-discount-wrapper',
          'effect' => 'slide',
        ),
      );

      $form['transaction_options']['actions']['add_order_discount'] = array(
        '#type' => 'container',
        '#id' => 'commerce-pos-discount-add-order-discount-wrapper',
      );

      if (!empty($form_state['triggering_element']['#element_key']) && $form_state['triggering_element']['#element_key'] == 'toggle-order-discount') {
        $discount_data = $form_state['transaction']->doAction('getExistingOrderDiscountAmount');

        // change discount button to toggle
        $form['transaction_options']['actions']['discount']['#element_key'] = 'toggle-order-discount-hide';

        $form['transaction_options']['actions']['add_order_discount']['amount'] = array(
          '#title' => t('Add Discount to Order'),
          '#type' => 'textfield',
          '#size' => 5,
          '#attributes' => array(
              'autofocus' => 'autofocus',
          ),
          '#default_value' => $discount_data ? $discount_data['amount'] : NULL,
        );

        $form['transaction_options']['actions']['add_order_discount']['percent'] = array(
          '#type' => 'button',
          '#size' => 5,
          '#value' => '%',
          '#ajax' => $wrapper_ajax,
          '#element_key' => 'add-order-percent-discount',
        );

        $form['transaction_options']['actions']['add_order_discount']['fixed'] = array(
          '#type' => 'button',
          '#size' => 5,
          '#value' => '$',
          '#ajax' => $wrapper_ajax,
          '#element_key' => 'add-order-fixed-discount',
        );

        if ($discount_data) {
          $form['transaction_options']['actions']['add_order_discount'][$discount_data['type']]['#attributes']['class'][] = 'active';
        }
      }
    }
  }
}

/**
 * Implements hook_commerce_pos_sale_form_ajax_alter().
 */
function commerce_pos_discount_commerce_pos_sale_form_ajax_alter(&$form_state, $triggering_element) {
  if (!empty($triggering_element['#element_key'])) {
    switch ($triggering_element['#element_key']) {
      case 'add-percent-discount':
      case 'add-fixed-discount':
        $discount_amount = $form_state['values']['line_items'][$triggering_element['#line_item_id']]['discounts']['add_discount']['amount'];

        if ($triggering_element['#element_key'] == 'add-percent-discount') {
          $discount_type = 'percent';
          // Convert percent 100% style to 1.0 style.
          $discount_amount /= 100;
        }
        else {
          $discount_type = 'fixed';
          // Convert the amount into cents, as we expected it to be provided
          // in dollars.
          $discount_amount *= 100;
        }

        $form_state['transaction']->doAction('addLineItemDiscount', $discount_type, $form_state['triggering_element']['#line_item_id'], $discount_amount);
        $form_state['order_updated'] = TRUE;
        break;

      case 'remove-discount':
        $discount_amount = 0;
        $discount_type = 'fixed';

        $form_state['transaction']->doAction('addLineItemDiscount', $discount_type, $form_state['triggering_element']['#line_item_id'], $discount_amount);
        $form_state['order_updated'] = TRUE;
        break;

      case 'add-order-percent-discount':
      case 'add-order-fixed-discount':
        $discount_amount = $form_state['values']['transaction_options']['actions']['add_order_discount']['amount'];

        if ($triggering_element['#element_key'] == 'add-order-percent-discount') {
          $discount_type = 'percent';
          // Convert percent 100% style to 1.0 style.
          $discount_amount /= 100;
        }
        else {
          $discount_type = 'fixed';
          // Convert the amount into cents, as we expected it to be provided
          // in dollars.
          $discount_amount *= 100;
        }

        $form_state['transaction']->doAction('addOrderDiscount', $discount_type, $discount_amount);
        $form_state['order_updated'] = TRUE;

        break;
    }
  }
}

/**
 * AJAX callback for the "Add Discount" buttons.
 */
function commerce_pos_discount_add_discount_js($form, &$form_state) {
  $line_item_id = $form_state['triggering_element']['#line_item_id'];
  return $form['line_items'][$line_item_id]['discounts'];
}

/**
 * AJAX callback for the order discounts section.
 */
function commerce_pos_discount_order_discount_js($form, &$form_state) {
  return $form['transaction_options']['actions']['add_order_discount'];
}

/**
 * AJAX callback to return the entire form wrapper.
 */
function commerce_pos_discount_wrapper_js($form, &$form_state) {
  return $form;
}

function commerce_pos_transaction_remove_order_discount_submit($form, &$form_state){
  // setting a discount of 0 removes it
  $form_state['transaction']->doAction('addOrderDiscount', 'fixed', 0);

  $form_state['rebuild'] = TRUE;
}