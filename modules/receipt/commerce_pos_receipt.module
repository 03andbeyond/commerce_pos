<?php

/**
 * @file
 * Core hooks and utility functions for commerce_pos_receipts.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_pos_receipt_libraries_info() {
  $libraries['escpos-php'] = array(
    'name' => 'ESC/POS Print Driver for PHP',
    'vendor url' => 'https://github.com/mike42/escpos-php',
    'download url' => 'https://github.com/mike42/escpos-php/archive/master.zip',
    'version' => '1.0',
    'files' => array(
      'php' => array('Escpos.php'),
    ),
  );

  $libraries['jquery-print'] = array(
    'name' => 'jQuery Print Plugin',
    'vendor url' => 'https://github.com/DoersGuild/jQuery.print',
    'version arguments' => array(
      'file' => 'jQuery.print.js',
      'pattern' => '/version\s+([0-9a-zA-Z\.-]+)/',
    ),
    'files' => array(
      'js' => array('jQuery.print.js'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function commerce_pos_receipt_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_pos_receipt' => array(
      'template' => 'commerce-pos-receipt',
      'file' => 'commerce_pos_receipt.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'transaction' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_pos_receipt_menu() {
  $items['printer-testing'] = array(
    'title' => 'Printer testing',
    'page callback' => 'printer_testing_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['pos/%/print-receipt'] = array(
    'title' => 'Print Transaction Receipt',
    'page callback' => 'commerce_pos_receipt_print',
    'page arguments' => array(1),
    'access callback' => 'commerce_pos_receipt_print_access',
    'access arguments' => array(1),
    'file' => 'includes/commerce_pos_receipt.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_pos_pay_finish_commands().
 */
function commerce_pos_receipt_commerce_pos_pay_finish_commands(CommercePosTransaction $transaction) {
  $commands = array();

  $receipt = theme('commerce_pos_receipt', array('transaction' => $transaction));

  $commands[] = array(
    'command' => 'printReceipt',
    'content' => $receipt,
  );

  return $commands;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pos_receipt_form_commerce_pos_pay_alter(&$form, &$form_state, $form_id) {
  // Attach libraries and JS needed to print a receipt.
  $js_settings = array(
    'commercePosReceipt' => array(
      'cssUrl' => url(drupal_get_path('module', 'commerce_pos_receipt') . '/css/commerce_pos_receipt.css', array(
        'absolute' => TRUE,
      )),
    ),
  );

  $form['#attached']['libraries_load'][] = array('jquery-print');
  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_receipt') . '/js/commerce_pos_receipt.js';
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $js_settings,
  );
}

/**
 * Access callback for printing a receipt.
 */
function commerce_pos_receipt_print_access($transaction_id) {
  global $user;

  $access = FALSE;

  if (user_access('administer commerce pos')) {
    $access = TRUE;
  }
  elseif (user_access('process commerce pos sales')) {
    $transaction = new CommercePosTransaction($transaction_id);
    if ($transaction->uid == $user->uid) {
      $access = TRUE;
    }
  }

  return $access;
}

function printer_testing_page() {
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_js(drupal_get_path('module', 'commerce_pos_receipt') . '/js/commerce_pos_receipt.js');
  libraries_load('jquery-print');

  $js_settings = array(
    'commercePosReceipt' => array(
      'cssUrl' => url(drupal_get_path('module', 'commerce_pos_receipt') . '/css/commerce_pos_receipt.css', array(
        'absolute' => TRUE,
      )),
    ),
  );

  drupal_add_js($js_settings, 'setting');

  return l(t('Click me'), 'pos/6/print-receipt', array('attributes' => array(
    'class' => array('use-ajax'),
  )));
}

