<?php

/**
 * @file
 * Core hooks and utility functions for commerce_pos_receipts.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_pos_receipt_libraries_info() {
  $libraries['escpos-php'] = array(
    'name' => 'ESC/POS Print Driver for PHP',
    'vendor url' => 'https://github.com/mike42/escpos-php',
    'download url' => 'https://github.com/mike42/escpos-php/archive/master.zip',
    'version' => '1.0',
    'files' => array(
      'php' => array('Escpos.php'),
    ),
  );

  $libraries['jquery-print'] = array(
    'name' => 'jQuery Print Plugin',
    'vendor url' => 'https://github.com/DoersGuild/jQuery.print',
    'version arguments' => array(
      'file' => 'jQuery.print.js',
      'pattern' => '/version\s+([0-9a-zA-Z\.-]+)/',
    ),
    'files' => array(
      'js' => array('jQuery.print.js'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function commerce_pos_receipt_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_pos_receipt' => array(
      'template' => 'commerce-pos-receipt',
      'file' => 'commerce_pos_receipt.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'transaction' => NULL,
      ),
    ),
    'commerce_pos_receipt_order_info' => array(
      'template' => 'commerce-pos-receipt-order-info',
      'file' => 'commerce_pos_receipt.theme.inc',
      'path' => $path . '/theme',
      'variables' => array(
        'order' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_pos_receipt_menu() {
  $items['printer-testing'] = array(
    'title' => 'Printer testing',
    'page callback' => 'printer_testing_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['pos/%/print-receipt'] = array(
    'title' => 'Print Transaction Receipt',
    'page callback' => 'commerce_pos_receipt_print',
    'page arguments' => array(1),
    'access callback' => 'commerce_pos_receipt_print_access',
    'access arguments' => array(1),
    'file' => 'includes/commerce_pos_receipt.pages.inc',
  );

  $items['admin/commerce/config/pos/receipts'] = array(
    'title' => 'Receipts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pos_receipt_settings'),
    'access arguments' => array('administer pos receipt receipts'),
    'file' => 'includes/commerce_pos_receipt.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_pos_receipt_entity_info_alter(&$entity_info) {
  // Add a custom display mode to orders for receipts.
  $entity_info['commerce_order']['view modes']['commerce_pos_receipt'] = array(
    'label' => t('POS Receipt'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function commerce_pos_receipt_permission() {
  return array(
    'administer pos receipt receipts' =>  array(
      'title' => t('Administer POS receipt settings'),
    ),
  );
}

/**
 * Implements hook_commerce_pos_pay_finish_commands().
 */
function commerce_pos_receipt_commerce_pos_pay_finish_commands(CommercePosTransaction $transaction) {
  $commands = array();

  $receipt = theme('commerce_pos_receipt', array('transaction' => $transaction));

  $commands[] = array(
    'command' => 'printReceipt',
    'content' => $receipt,
  );

  return $commands;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pos_receipt_form_commerce_pos_pay_alter(&$form, &$form_state, $form_id) {
  // Attach libraries and JS needed to print a receipt.
  $js_settings = array(
    'commercePosReceipt' => array(
      'cssUrl' => url(drupal_get_path('module', 'commerce_pos_receipt') . '/css/commerce_pos_receipt.css', array(
        'absolute' => TRUE,
      )),
    ),
  );

  $form['#attached']['libraries_load'][] = array('jquery-print');
  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_pos_receipt') . '/js/commerce_pos_receipt.js';
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $js_settings,
  );
}

/**
 * Access callback for printing a receipt.
 */
function commerce_pos_receipt_print_access($transaction_id) {
  global $user;

  $access = FALSE;

  if (user_access('administer commerce pos')) {
    $access = TRUE;
  }
  elseif (user_access('process commerce pos sales')) {
    $transaction = new CommercePosTransaction($transaction_id);
    if ($transaction->uid == $user->uid) {
      $access = TRUE;
    }
  }

  return $access;
}

function printer_testing_page() {
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_js(drupal_get_path('module', 'commerce_pos_receipt') . '/js/commerce_pos_receipt.js');
  libraries_load('jquery-print');

  $js_settings = array(
    'commercePosReceipt' => array(
      'cssUrl' => url(drupal_get_path('module', 'commerce_pos_receipt') . '/css/commerce_pos_receipt.css', array(
        'absolute' => TRUE,
      )),
    ),
  );

  drupal_add_js($js_settings, 'setting');

  $output = '';

  $output .= l(t('Click me'), 'pos/9/print-receipt', array('attributes' => array(
    'class' => array('use-ajax'),
  )));

  $test = new CommercePosTransaction(9);

  $output .= theme('commerce_pos_receipt', array('transaction' => $test));


  return $output;
}

function commerce_pos_receipt_build_receipt_body($order) {
  $output = array();

  $rows = array();
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $previous_row = FALSE;

  foreach ($wrapper->commerce_line_items as $delta => $line_item) {
    if (!$line_item->value()) {
      // Handle broken line items by not skipping them - not sure what else to do here.
      continue;
    }
    $row = array(
      array(
        'data' => commerce_line_item_title($line_item->value()),
        'class' => array('component-name'),
      ),
      array(
        'data' => commerce_currency_format(
          $line_item->commerce_total->amount->raw(),
          $line_item->commerce_total->currency_code->raw(),
          $line_item
        ),
        'class' => array('component-total'),
      ),
    );

    $first_row = array(
      'data' => $row,
      'class' => array('line-item'),
      'data-line-item-id' => $line_item->line_item_id->raw()
    );

    $second_row = FALSE;

    if ($line_item->__isset('commerce_product') && $line_item->commerce_product->getIdentifier()) {
      $first_row['class'][] = 'has-details';

      $row = array(
        array(
          'data' => t('@sku x@qty @ @price', array(
            '@sku' => $line_item->commerce_product->sku->value(),
            '@qty' => (int) $line_item->quantity->value(),
            '@price' => commerce_currency_format(
              $line_item->commerce_unit_price->amount->raw(),
              $line_item->commerce_unit_price->currency_code->raw(),
              $line_item
            ),
          )),
          'colspan' => 2,
        ),
      );

      $second_row = array(
        'data' => $row,
        'class' => array('line-item-details'),
        'data-line-item-id' => $line_item->line_item_id->raw()
      );
    }

    $rows[] = $first_row;

    if ($second_row) {
      $rows[] = $second_row;
    }
  }

  $rows[count($rows) - 1]['class'][] = 'last';

  $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
  $payment_rows = array();

  foreach ($payments as $payment) {
    $row = array(
      array(
        'data' => commerce_payment_method_get_title('title', $payment->payment_method),
        'class' => array('component-label'),
      ),
      array(
        'data' => commerce_currency_format($payment->amount, $payment->currency_code, $payment),
        'class' => array('component-total'),
      ),
    );
    $payment_rows[] = array(
      'data' => $row,
      'class' => array('payment'),
    );
  }

  $output['info'] = array(
    '#theme' => 'commerce_pos_receipt_order_info',
    '#order' => $order,
    '#weight' => -10,
  );

  $output['line_items'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#empty' => 'No Items in order.',
    '#attributes' => array('class' => array('commerce-pos-order')),
    '#weight' => 5,
  );

  $order_total = field_view_field('commerce_order', $order, 'commerce_order_total', 'commerce_pos_receipt');
  $output['total'] = $order_total;
  $output['total']['#weight'] = 10;

  $output['payments'] = array(
    '#theme' => 'table',
    '#rows' => $payment_rows,
    '#attributes' => array('class' => array('commerce-pos-order')),
    '#weight' => 15,
  );

  return $output;
}
