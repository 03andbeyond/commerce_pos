<?php

class CommercePOSComponentTest extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Component Test',
      'description' => 'Test base components.',
      'group' => 'POS',
    );
  }

  function setUp() {
    require_once __DIR__ .'/../classes/POS_State.php';
    require_once __DIR__ .'/../classes/commands/POS_Command.php';
    require_once __DIR__ .'/../classes/POS_Controller.php';
    require_once __DIR__ .'/../classes/commands/POS_Command_Registry.php';
    require_once __DIR__ .'/../classes/commands/POSCommand_Clear.php';

    $modules = array('commerce_pos');
    parent::setUp($modules);
  }

  function testState() {
    $state = new POS_State();
    $order = new stdClass();
    $order->title = $this->randomName(10);
    $state->setOrder($order);
    $this->assertEqual($order, $state->getOrder(), 'Order can be persisted.');

    // Test the should print
    $this->assertFalse($state->getPrintRender(), 'Should print is set to FALSE by default.');
    $state->setPrintRender(array('#markup' => 'true'));
    $this->assertTrue($state->getPrintRender(), 'Should print is set to TRUE after triggering a print.');
    $this->assertFalse($state->getPrintRender(), 'Should print is set to FALSE after being reset.');
    $state->setPrintRender(array('#markup' => 'true')); // Leave set to true so we can check reset.

    $state->reset();
    $this->assertFalse($state->getPrintRender(), 'reset() resets the print status.');
    $this->assertFalse($state->hasOrder(), 'reset() clears the current order.');
  }

  function testCommandRegistry() {
    $commands = array(
      'clear' => new POSCommand_Clear('Clear', 'clear', 'CL'),
      // Pretend that this clear command is an order command.
      'order' => new POSCommand_Clear('Order', 'order', 'OR%s'),
    );

    $registry = new POS_Command_Registry($commands);
    $command = $registry->determineActiveCommand('CL');
    $this->assertIdentical($command, $commands['clear'], 'Command can be determined based on input.');
    $command = $registry->determineActiveCommand('OR55');
    $this->assertIdentical($command, $commands['order'], 'Order command can be determined based on input.');

    $invalid_patterns = array('GARBAGE', 'cl', 'OR');
    foreach($invalid_patterns as $pattern) {
      $this->assertFalse($registry->determineActiveCommand($pattern), 'No active command for ' . $pattern);
    }
  }

  function testController() {
    $state = new POS_State();
    $dummy_order = new stdClass();
    $dummy_order->property = 'test';
    $state->setOrder($dummy_order);

    $registry = new POS_Command_Registry(array(
      new POSCommand_Clear('Clear', 'clear', 'CL')
    ));

    $controller = new POS_Controller($state, $registry);
    $this->assertTrue($state->hasOrder(), 'State has order before executing clear command.');
    $controller->executeCommand('CL');
    $this->assertFalse($state->hasOrder(), 'Executing the clear command on the controller clears the order from the state.');

    try {
      $controller->executeCommand('garbage_input');
      $this->fail('Controller throws an exception for invalid input.');
    }
    catch(InvalidArgumentException $e) {
      $this->pass('Controller throws an exception for invalid input.');
    }
  }
}