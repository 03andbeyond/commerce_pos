<?php

class CommercePOSComponentTest extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Component Test',
      'description' => 'Test base components.',
      'group' => 'POS',
    );
  }

  function setUp() {
    require_once __DIR__ .'/../classes/POS_State.php';
    require_once __DIR__ .'/../classes/POS.php';
    require_once __DIR__ .'/../classes/commands/POS_Command.php';
    require_once __DIR__ .'/../classes/commands/POSCommand_Clear.php';

    $modules = array('commerce_pos');
    parent::setUp($modules);
  }

  function testState() {
    $state = new POS_State();
    $order = new stdClass();
    $order->title = $this->randomName(10);
    $state->setOrder($order);
    $this->assertEqual($order, $state->getOrder(), 'Order can be persisted.');

    // Test the should print
    $this->assertFalse($state->getPrintRender(), 'Should print is set to FALSE by default.');
    $state->setPrintRender(array('#markup' => 'true'));
    $this->assertTrue($state->getPrintRender(), 'Should print is set to TRUE after triggering a print.');
    $this->assertFalse($state->getPrintRender(), 'Should print is set to FALSE after being reset.');
    $state->setPrintRender(array('#markup' => 'true')); // Leave set to true so we can check reset.

    $state->reset();
    $this->assertFalse($state->getPrintRender(), 'reset() resets the print status.');
    $this->assertFalse($state->hasOrder(), 'reset() clears the current order.');
  }

  function testCommandPatterns() {
    $command1 = new POSCommand_Clear('Clear', 'clear', 'CL');
    $this->assertTrue($command1->shouldRun('CL'));
    $this->assertFalse($command1->shouldRun('cl'));
    $this->assertFalse($command1->shouldRun('CLEAR'));

    $command2 = new POSCommand_Clear('Order', 'order', 'OR%s');
    $this->assertTrue($command2->shouldRun('OR55'));
    $this->assertFalse($command2->shouldRun('OR'));
  }

  function testPOS() {
    $state = new POS_State();
    $commands = array(
      'clear' => new POSCommand_Clear('Clear', 'clear', 'CL')
    );
    $pos = new POS($state, $commands);

    $dummy_order = new stdClass();
    $dummy_order->property = 'test';
    $state->setOrder($dummy_order);

    $this->assertTrue($state->hasOrder(), 'State has order before executing clear command.');
    $pos->executeCommand('CL');
    $this->assertFalse($state->hasOrder(), 'Executing the clear command on the controller clears the order from the state.');

    try {
      $pos->executeCommand('garbage_input');
      $this->fail('POS throws an exception for invalid input.');
    }
    catch(InvalidArgumentException $e) {
      $this->pass('POS throws an exception for invalid input.');
    }
  }
}