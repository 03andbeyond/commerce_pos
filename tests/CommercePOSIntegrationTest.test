<?php

class CommercePOSIntegrationTest extends CommercePOSBaseTest {
  public $product;

  /** @var POS_State */
  public $state;
  /** @var CommercePOS */
  public $pos;

  public static function getInfo() {
    return array(
      'name' => 'Integrations Tests',
      'description' => 'Tests integration with rules and other modules.',
      'group' => 'POS',
    );
  }

  public function setUp($extra_modules = array()) {
    $extra_modules[] = 'commerce_product_pricing';
    $extra_modules[] = 'commerce_payment_cash';
    parent::setUp($extra_modules);
    $this->drupalLogin($this->storeCashier);

    // We need to use the global POS object here.
    $this->pos = CommercePOS::instance();
    // Necessary to ensure a clean session backed state...
    // Dirty hack, but necessary for now.  In the future,
    // it would be nice to replace both $pos->state and POS_State::instance()
    // with a clean version.
    $this->pos->executeCommand('CL');
    $this->product = $this->createDummyProduct('testprod', 'Test Product', 5);
  }

  /**
   * Test that product pricing rules work the first time.
   * @see https://drupal.org/node/2093205
   */
  public function testProductPricing() {
    // Create a product pricing rule to deduct 1 from any product's price.
    entity_import('rules_config', '{ "rules_discount_on_pos" : {
    "LABEL" : "Discount products purchased through POS",
    "PLUGIN" : "reaction rule",
    "REQUIRES" : [ "commerce_pos", "commerce_line_item", "commerce_product_reference" ],
    "ON" : { "commerce_product_calculate_sell_price" : [] },
    "IF" : [
      { "rules_condition_order_is_on_pos" : { "order" : [ "commerce-line-item:order" ] } }
    ],
    "DO" : [
      { "commerce_line_item_unit_price_subtract" : {
          "commerce_line_item" : [ "commerce_line_item" ],
          "amount" : "1",
          "component_name" : "discount",
          "round_mode" : "1"
        }
      }
    ]
  }
}')->save();

    $this->pos->executeCommand($this->product->sku);

    $item_found = FALSE;
    // Verify that the discount was granted.
    foreach ($this->pos->getState()->getOrder()->commerce_line_items[LANGUAGE_NONE] as $item) {
      $line_item = commerce_line_item_load($item['line_item_id']);
      if ($line_item->commerce_product[LANGUAGE_NONE][0]['product_id'] == $this->product->product_id) {
        $item_found = TRUE;
        $this->assertEqual($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'], 4, 'The product is discounted according to the pricing rule.');
      }
    }
    if(!$item_found) {
      $this->fail('Product was not added to order.');
    }
  }

  /**
   * Test that our rules event fires and changes the order status.
   */
  public function testRulesEvent() {
    $this->pos->executeCommand($this->product->sku);
    $order = $this->pos->getState()->getOrder();
    $balance = commerce_payment_order_balance($order);
    $transaction = commerce_payment_transaction_new('cash', $order->order_id);
    $transaction->currency_code = $balance['currency_code'];
    $transaction->amount = $balance['amount'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($transaction);
    // This will only be set if the rule was triggered and succeded:
    $this->assertEqual($this->pos->getState()->getOrder()->status, 'pos_completed');
  }
}