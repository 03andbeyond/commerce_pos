<?php

class CommercePOSInterfaceTest extends CommercePOSBaseTest {

  /** @var POS_State */
  public $state;
  /** @var POS_Button_Registry */
  public $button_registry;

  public static function getInfo() {
    return array(
      'name' => 'Interface Tests',
      'description' => 'Test interface functionality.',
      'group' => 'POS',
    );
  }

  function setUp() {
    parent::setUp();
    $this->drupalLogin($this->storeCashier);

    $this->state = new POS_State();
    $clear_command = new POSCommand_Clear('Clear', 'clear', 'CL');
    $this->button_registry = new POS_Button_Registry(array(
      new POS_Button_Command($clear_command),
    ));
  }

  protected function buildPane(POS_Pane $pane) {
    return $pane->build($this->state, $this->button_registry);
  }

  function testPrintReceipt() {
    $interface = new POS_Interface($this->state, $this->button_registry, array());
    $order = $this->createDummyOrder();
    $this->state->setOrder($order);
    $this->assertEqual(array(), $interface->buildAjax(), 'Ajax build is empty before setting print flag.');
    $render = array('#markup' => 1);
    $this->state->setPrintRender($render);
    $output = $interface->buildAjax();
    $this->assertEqual($output[0]['command'], 'printReceipt', 'Ajax printReceipt command is given after setting print flag.');

    $this->state->setPrintRender($render);
    $output = $interface->build();
    $this->assertEqual($output[0]['print'], $render, 'Receipt is printed on page after setting print flag.');
  }

  function testCommandsPane() {
    $pane = new POSPane_Commands('commands', 'Commands');
    $output = $this->buildPane($pane);
    $this->assertEqual(count($output['#buttons']), 1, 'Commands pane displays 1 button');
    $this->drupalSetContent(drupal_render($output));
    $this->assertRaw('data-pos-input="CL"', 'Clear button contains the correct data property');

    // Check the number pad configuration.
    $this->assertEqual(count($output['#numbers']), 0, 'Commands pane does not display the number pad.');
    $configured_pane = new POSPane_Commands('commands', 'Commands', array('show_keypad' => 1));
    $output = $this->buildPane($configured_pane);
    $this->drupalSetContent(drupal_render($output));
    $this->assertEqual(count($output['#numbers']), 11, 'Commands pane displays the number after configuring.');
    foreach (range(9, 0) as $i) {
      $this->assertRaw('data-pos-input="%s' . $i . '"', format_string('!i button contains the correct data attribute.', array('!i' => $i)));
    }
    $this->assertRaw('data-pos-input="%s*"', 'Asterisk button contains the correct data-attribute.');
  }

  function testInputPane() {
    $pane = new POSPane_Input('input', 'Input');
    $output = $this->buildPane($pane);
    $this->drupalSetContent(drupal_render($output));
    // Make sure the form names/id's match JS expectations.
    $this->assertRaw('id="pos-input-form"', 'Input form ID is correct.');
    $this->assertFieldByName('input', NULL, 'Input field is present.');
  }

  function testOrderPane() {
    $order = $this->createDummyOrder();
    $this->state->setOrder($order);
    $pane = new POSPane_Order('order', 'Order');
    $output = $this->buildPane($pane);
    $this->drupalSetContent(drupal_render($output));
    $this->assertText('Order: ' . $order->order_id, 'Order ID displayed matches the order on the POS.');
    $this->assertText('Customer: ' . format_username(user_load($order->uid)), 'Customer name displayed matches the order on the POS.');

    foreach ($order->commerce_line_items[LANGUAGE_NONE] as $item) {
      $this->assertNoRaw('data-pos-input="VOID' . $item['line_item_id'] . '"', 'Void button was not found.');
    }

    // Add the void command to the registry and check that the void button appears.
    $buttons = $this->button_registry->getButtons();
    $buttons[] = new POS_Button_Command(new POSCommand_Void('Void', 'void', 'VOID%s'));
    $this->button_registry->setButtons($buttons);

    $output = $this->buildPane($pane);
    $this->drupalSetContent(drupal_render($output));

    foreach ($order->commerce_line_items[LANGUAGE_NONE] as $item) {
      $this->assertRaw('data-pos-input="VOID' . $item['line_item_id'] . '"', 'Void button was found.');
    }
  }

  function testButtonGeneration() {
    $button = new POS_Button_Command(new POSCommand_Clear('Clear', 'clear', 'ABC%s'));
    $this->assertFalse($button->render(), 'Calling render with no input returns false.');
    $rendered = $button->render(NULL, 'test', array('query' => array('token' => 'token')));
    $this->drupalSetContent($rendered);
    $links = $this->xpath('//a[contains(@data-pos-input, :input)]', array(':input' => 'ABCtest'));
    $this->assert(!empty($links[0]), 'Data input is set properly');

    $link_dest = url('admin/commerce/pos', array('query' => array('command' => 'ABCtest', 'token' => 'token')));
    $this->assertLinkByHref($link_dest);
    $this->assertRaw('>Clear<', 'Button text defaults to the command name.');

    $button_name = $this->randomName();
    $rendered = $button->render($button_name, 'test2', array(
      'attributes' => array(
        'class' => 'testClass',
      )
    ));
    $this->drupalSetContent($rendered);
    $this->assertRaw('>' . $button_name . '<', 'Button name can be changed by the caller.');
    $this->assertRaw('testClass', 'Button attributes can be added by the caller.');

    $this->drupalSetContent($button->render('&some more', 'input'));
    $this->assertRaw('>&amp;some more<', 'Button text is escaped once and only once.');
  }
}